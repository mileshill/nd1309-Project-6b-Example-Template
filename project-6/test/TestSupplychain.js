// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')
const truffleAssert = require('truffle-assertions')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei("1", "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'
    const states = {
        harvested: 0,
        processed: 1,
        packed: 2,
        forSale: 3,
        sold: 4,
        shipped: 5,
        received: 6,
        purchased:7
    }

    after(async () => {
        const supplyChain = await SupplyChain.deployed();
        let tx = await supplyChain.deleteItem(upc, {from: ownerID})
        truffleAssert.eventEmitted(tx, 'Deleted', (ev) => {
            console.log("Deleted UPC: ", ev.upc.toNumber())
            return ev.upc.toNumber() === upc;
        })
    })

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])
    accounts.forEach( async (acct, idx) => {

        let balance = await web3.eth.getBalance(acct);

        console.log(`Account: ${idx} Balance: ${web3.utils.fromWei(balance)}`);
    })
    // 1st Test
    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        // Watch the emitted event Harvested()
        // Mark an item as Harvested by calling function harvestItem()
        let tx = await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes)
        truffleAssert.eventEmitted(tx, 'Harvested', (ev) => {
            return ev.upc.toNumber() === upc;
        })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        // Verify the result set
        assert.equal(resultBufferOne[0], 2, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], ownerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], states.harvested, 'Error: Invalid item State')
    })

    // 2nd Test
    it("Testing smart contract function processItem() that allows a farmer to process coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        // Watch the emitted event Processed()
        // Mark an item as Processed by calling function processItem()
        let tx = await supplyChain.processItem(upc)
        truffleAssert.eventEmitted(tx, "Processed", (ev) => {
            return ev.upc.toNumber() === upc;
        })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[1], upc, "Error: Invalid Item UPC")
        assert.equal(resultBufferTwo[5], states.processed, "Error: Invalid State")
        
    })    

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {
        const supplyChain = await SupplyChain.deployed()

        let tx = await supplyChain.packItem(upc)
        truffleAssert.eventEmitted(tx, "Packed", (ev) => {
            return ev.upc.toNumber() === upc;
        })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        // Verify the result set
        assert.equal(resultBufferTwo[1], upc, "Error: Invalid Item UPC")
        assert.equal(resultBufferTwo[5], states.packed, "Error: Invalid State")
    })

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        let tx = await supplyChain.sellItem(upc, productPrice)
        truffleAssert.eventEmitted(tx, "ForSale", (ev) => {
            return ev.upc.toNumber() === upc;
        })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        // Verify the result set
        assert.equal(resultBufferTwo[1], upc, "Error: Invalid Item UPC")
        assert.equal(resultBufferTwo[5], states.forSale, "Error: Invalid State")

    })

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        let distributorBalance= await web3.eth.getBalance(distributorID);
        let tx = await supplyChain.buyItem(upc, {from: distributorID, value: distributorBalance, gasPrice: 0}).catch(err => console.log(err))
        truffleAssert.eventEmitted(tx, "Sold", (ev) => {
            return ev.upc.toNumber() === upc;
        })
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        // Verify the result set
        assert.equal(resultBufferTwo[1], upc, "Error: Invalid Item UPC")
        assert.equal(resultBufferTwo[5], states.sold, "Error: Invalid State")
        assert.equal(resultBufferTwo[6], distributorID, "Error: Invalid Distributor ID")
    })

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        let tx = await supplyChain.shipItem(upc, {from: distributorID, gasPrice: 0})
        truffleAssert.eventEmitted(tx, "Shipped", (ev) => {
            return ev.upc.toNumber() === upc;
        })
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[1], upc, "Error: Invalid Item UPC")
        assert.equal(resultBufferTwo[5], states.shipped, "Error: Invalid State")
        assert.equal(resultBufferTwo[6], distributorID, "Error: Invalid Distributor ID")
    })

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        const supplyChain = await SupplyChain.deployed()
        let tx = await supplyChain.receiveItem(upc, {from: retailerID, gasPrice: 0})
        truffleAssert.eventEmitted(tx, "Received", (ev) => {
            return ev.upc.toNumber() === upc;
        })
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[1], upc, "Error: Invalid Item UPC")
        assert.equal(resultBufferTwo[5], states.received, "Error: Invalid State")
        assert.equal(resultBufferTwo[7], retailerID, "Error: Invalid Retailer ID")
    })

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        let tx = await supplyChain.purchaseItem(upc, {from: consumerID, gasPrice: 0})
        truffleAssert.eventEmitted(tx, "Purchased", (ev) => {
            return ev.upc.toNumber() === upc;
        })
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[1], upc, "Error: Invalid Item UPC")
        assert.equal(resultBufferTwo[5], states.purchased, "Error: Invalid State")
        assert.equal(resultBufferTwo[8], consumerID, "Error: Invalid Consumer ID")
    })

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()
        let result = await supplyChain.fetchItemBufferOne.call(upc);
        assert.equal(result[0], sku + 1, "Error: Invalid SKU")
        assert.equal(result[1], upc, "Error: Invalid UPC")
        assert.equal(result[2], consumerID, "Error: Invalid Consumer ID")
        assert.equal(result[3], originFarmerID, "Error: Invalid Origin Farmer ID")
        assert.equal(result[4], originFarmName, "Error: Invalid Origin Farm Name")
        assert.equal(result[5], originFarmInformation, "Error: Invalid Farm Information")
        assert.equal(result[6], originFarmLatitude, "Error: Invalid Farm Latitude")
        assert.equal(result[7], originFarmLongitude, "Error: Invalid Farm Longitude")

    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()
        let result = await supplyChain.fetchItemBufferTwo.call(upc);
        assert.equal(result[0], sku + 1,"Error: Invalid SKU")
        assert.equal(result[1], upc,"Error: Invalid UPC")
        assert.equal(result[2].toNumber(), upc + sku + 1,"Error: Invalid Product ID")
        assert.equal(result[3], productNotes,"Error: Invalid Product Notes")
        assert.equal(result[4], productPrice,"Error: Invalid Product Price")
        assert.equal(result[5], states.purchased,"Error: Invalid State")
        assert.equal(result[6], distributorID,"Error: Invalid Distributor ID")
        assert.equal(result[7], retailerID,"Error: Invalid Retailer ID")
        assert.equal(result[8], consumerID,"Error: Invalid Consumer ID")
    })

});

